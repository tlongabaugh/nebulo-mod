/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginEditor.h"

// Thanks Uri!!! So helpful man!
void NebuloModAudioProcessorEditor::createSlider(Slider &slider, Slider::SliderStyle style, double defaultVal, double min, double max, double incr, std::string name) {
    // these define the parameters of our slider object
    slider.setSliderStyle(style);
    slider.setRange(min, max, incr);
    slider.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    slider.setPopupDisplayEnabled (true, this);
    slider.setTextValueSuffix(name);
    slider.setValue(defaultVal);
    
    // set this class as the listener for the slider's callback function
    slider.addListener(this);
    
    // this function adds the slider to the editor
    addAndMakeVisible(&slider);
    slider.setVisible(false);
    
    slider.setComponentID(name);
}

void NebuloModAudioProcessorEditor::createLabel(Label &label, std::string name)
{
    label.setFont(25);
    label.setEnabled(true);
    label.setText(name, dontSendNotification);
    label.setName(name);
    addAndMakeVisible(label);
    label.setVisible(false);
}

//==============================================================================
NebuloModAudioProcessorEditor::NebuloModAudioProcessorEditor (NebuloModAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (600, 450);
    /*
    gainSlider.setSliderStyle (Slider::LinearVertical);
    gainSlider.setRange(0.0, 1.0, 0.01);
    gainSlider.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    gainSlider.setPopupDisplayEnabled (true, this);
    gainSlider.setTextValueSuffix(" Volume");
    gainSlider.setValue(1.0);
    
    addAndMakeVisible(gainSlider);
    gainSlider.addListener(this);
     */
    
    // Menu
    modMenu.setText("Select Modulation");
    modMenu.addItem("Flanger", 1);
    modMenu.addItem("Phaser", 2);
    modMenu.setEnabled(true);
    modMenu.setSize(160, 30);
    addAndMakeVisible(&modMenu);
    modMenu.addListener(this);
    
    // Create dah sliders!!!
    createSlider(depthSlider, Slider::Rotary, processor.depthVal, 0.0, 1.0, 0.01, "Depth");
    createSlider(rateSlider, Slider::Rotary, processor.rateVal, 0.0, 1.0, 0.01, "Rate");
    createSlider(feedBackSlider, Slider::Rotary, processor.feedbackVal, 0.0, 100.0, 1.0, "Feedback");
    createSlider(mixSlider, Slider::Rotary, processor.mixVal, 0.0, 1.0, 0.01, "Volume");
    
    // Create texts!
    createLabel(depthText, "Depth");
    createLabel(rateText, "Rate");
    createLabel(feedbackText, "Feedback");
    createLabel(mixText, "Mix");
    
}

NebuloModAudioProcessorEditor::~NebuloModAudioProcessorEditor()
{
}

//==============================================================================
void NebuloModAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::wheat);

    g.setColour (Colours::black);
    g.setFont (28.0f);
    g.drawFittedText ("Nebulo Mod", getLocalBounds(), Justification::bottomLeft, 1);
}

void NebuloModAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
    
    // gainSlider.setBounds(300, 250, 20, 100);
    
    // Knobs!!!
    depthSlider.setBounds(125, 150, 50, 50);
    rateSlider.setBounds(225, 150, 50, 50);
    feedBackSlider.setBounds(325, 150, 50, 50);
    mixSlider.setBounds(425, 150, 50, 50);
    
    // Menus!!!
    modMenu.setBounds(60, 50, 200, 200);
    
    // Texts!!!
    depthText.setBounds(125, 205, 25, 25);
    rateText.setBounds(225, 205, 25, 25);
    feedbackText.setBounds(325, 205, 25, 25);
    mixText.setBounds(425, 205, 25, 25);
}

void NebuloModAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    // processor.gain = gainSlider.getValue();
    
    if (slider->getComponentID().compare("Mix") == 0) {
        processor.mixVal = slider->getValue();
    }
    else if (slider->getComponentID().compare("Depth") == 0) {
        processor.depthVal = slider->getValue();
    }
    else if (slider->getComponentID().compare("Rate") == 0) {
        processor.rateVal = slider->getValue();
    }
    else if (slider->getComponentID().compare("Feedback") == 0) {
        processor.feedbackVal = slider->getValue();
    }
    
    // Update Flanger
    if (modMenu.getSelectedItemIndex() == 0)
    {
        processor.updateFlanger();
    }
    // Update Phaser
    else if (modMenu.getSelectedItemIndex() == 1)
    {
        // processor.updatePhaser();
    }
}

void NebuloModAudioProcessorEditor::comboBoxChanged(ComboBox *comboBoxThatHasChanged)
{
    // Update Flanger
    if (modMenu.getSelectedItemIndex() == 0)
    {
        depthSlider.setVisible(true);
        rateSlider.setVisible(true);
        feedBackSlider.setVisible(true);
        mixSlider.setVisible(true);
        
        depthText.setVisible(true);
        rateText.setVisible(true);
        feedbackText.setVisible(true);
        mixText.setVisible(true);
    }
    // Update Phaser
    else if (modMenu.getSelectedItemIndex() == 1)
    {
        depthSlider.setVisible(false);
        rateSlider.setVisible(false);
        feedBackSlider.setVisible(false);
        mixSlider.setVisible(false);
    
        depthText.setVisible(false);
        rateText.setVisible(false);
        feedbackText.setVisible(false);
        mixText.setVisible(false);
    }
}