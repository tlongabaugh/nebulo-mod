/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginEditor.h"

// Thanks Uri!!! So helpful man!
void NebuloModAudioProcessorEditor::createSlider(Slider &slider, Slider::SliderStyle style, double defaultVal, double min, double max, double incr, std::string name) {
    // these define the parameters of our slider object
    slider.setSliderStyle(style);
    slider.setRange(min, max, incr);
    slider.setTextBoxStyle (Slider::NoTextBox, false, 90, 0);
    slider.setPopupDisplayEnabled (true, this);
    slider.setTextValueSuffix(name);
    slider.setValue(defaultVal);
    
    // set this class as the listener for the slider's callback function
    slider.addListener(this);
    
    // this function adds the slider to the editor
    addAndMakeVisible(&slider);
    slider.setVisible(false);
    
    slider.setComponentID(name);
    slider.isAlwaysOnTop();
}

void NebuloModAudioProcessorEditor::createLabel(Label &label, std::string name)
{
    label.setSize(100,50);
    label.setEnabled(true);
    label.setText(name, dontSendNotification);
    addAndMakeVisible(label);
    label.setVisible(false);
    label.isAlwaysOnTop();
}

//==============================================================================
NebuloModAudioProcessorEditor::NebuloModAudioProcessorEditor (NebuloModAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (700, 550);
    
    // EFFECT PARAMETER SIDE
    
    // Menu
    modMenu.setText("Select Modulation");
    modMenu.addItem("Flanger", 1);
    modMenu.addItem("Phaser", 2);
    modMenu.setEnabled(true);
    modMenu.setSize(180, 30);
    addAndMakeVisible(&modMenu);
    modMenu.addListener(this);
    
    // Create dah sliders!!!
    createSlider(depthSlider, Slider::LinearHorizontal, processor.flDepthVal, 0.0, 1.0, 0.01, " Depth");
    createSlider(rateSlider, Slider::LinearHorizontal, processor.flRateVal, 0.0, 1.0, 0.01, " Rate");
    createSlider(feedBackSlider, Slider::LinearHorizontal, processor.flFeedbackVal, 0.0, 100.0, 1.0, " Feedback");
    createSlider(mixSlider, Slider::LinearHorizontal, processor.flMixVal, 0.0, 1.0, 0.01, " Volume");
    
    // Create texts!
    createLabel(depthText, "Depth");
    createLabel(rateText, "Rate");
    createLabel(feedbackText, "Feedback");
    createLabel(mixText, "Mix");
    
    fxText.setSize(200, 50);
    
    // Backgrounds
    //fxBackground->setColour(Colours::chocolate);
    //fxBackground->drawRoundedRectangle(0, 0, 300, 300, 5, 5);
    // fxBackground->fillRect(<#const Rectangle<int> &rectangle#>)
    
    
    // LFO PARAMETER SIDE
    
    // Menu
    lfoMenu.setText("Select LFO Waveform");
    lfoMenu.addItem("Sine", 1);
    lfoMenu.addItem("Triangle", 2);
    lfoMenu.addItem("Sawtooth", 3);
    lfoMenu.addItem("Square", 4);
    lfoMenu.addItem("Custom", 5);
    lfoMenu.setSize(180, 30);
    addAndMakeVisible(&lfoMenu);
    lfoMenu.addListener(this);
    
}

NebuloModAudioProcessorEditor::~NebuloModAudioProcessorEditor()
{
}

//==============================================================================
void NebuloModAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::wheat);

    g.setColour (Colours::black);
    g.setFont (28.0f);
    g.drawFittedText ("Nebulo Mod", getLocalBounds(), Justification::bottomLeft, 1);
}

void NebuloModAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..

    // Knobs!!!
    depthSlider.setBounds(350, 150, 250, 75);
    rateSlider.setBounds(350, 200, 250, 75);
    feedBackSlider.setBounds(350, 250, 250, 75);
    mixSlider.setBounds(350, 300, 250, 75);
    
    // Menus!!!
    modMenu.setBounds(390, 120, 200, 200);
    lfoMenu.setBounds(70, 120, 200, 200);
    
    // Texts!!!
    depthText.setBounds(610, 160, 25, 75);
    rateText.setBounds(610, 210, 25, 75);
    feedbackText.setBounds(610, 260, 25, 75);
    mixText.setBounds(610, 310, 25, 75);
    fxText.setBounds(450, 360, 100, 50);
    
    // Backgrounds
}

void NebuloModAudioProcessorEditor::sliderValueChanged(Slider* slider)
{    
    // Update Flanger
    if (modMenu.getSelectedItemIndex() == 0)
    {
        if (slider->getComponentID().compare("Mix") == 0) {
            processor.flMixVal = slider->getValue();
        }
        else if (slider->getComponentID().compare("Depth") == 0) {
            processor.flDepthVal = slider->getValue();
        }
        else if (slider->getComponentID().compare("Rate") == 0) {
            processor.flRateVal = slider->getValue();
        }
        else if (slider->getComponentID().compare("Feedback") == 0) {
            processor.flFeedbackVal = slider->getValue();
        }
        
        processor.updateFlanger();
    }
    // Update Phaser
    else if (modMenu.getSelectedItemIndex() == 1)
    {
        if (slider->getComponentID().compare("Mix") == 0) {
            processor.phsMixVal = slider->getValue();
        }
        else if (slider->getComponentID().compare("Depth") == 0) {
            processor.phsDepthVal = slider->getValue();
        }
        else if (slider->getComponentID().compare("Rate") == 0) {
            processor.phsRateVal = slider->getValue();
        }
        else if (slider->getComponentID().compare("Feedback") == 0) {
            processor.phsFeedbackVal = slider->getValue();
        }
        
        processor.updatePhaser();
    }
}

void NebuloModAudioProcessorEditor::comboBoxChanged(ComboBox *comboBoxThatHasChanged)
{
    // Update GUI 
    if ((modMenu.getSelectedItemIndex() == 0) || (modMenu.getSelectedItemIndex() == 1))
    {
        depthSlider.setVisible(true);
        rateSlider.setVisible(true);
        feedBackSlider.setVisible(true);
        mixSlider.setVisible(true);
        
        depthText.setVisible(true);
        rateText.setVisible(true);
        feedbackText.setVisible(true);
        mixText.setVisible(true);
        
        if (modMenu.getSelectedItemIndex() == 0)
        {
            fxText.setText("Flanger", dontSendNotification);
        }
        else if (modMenu.getSelectedItemIndex() == 1)
        {
            fxText.setText("Phaser", dontSendNotification);
        }
        
        addAndMakeVisible(fxText);
        fxText.setVisible(true);
    }
}
