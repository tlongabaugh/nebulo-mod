/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "Flanger.h"
#include "Phaser.h"


//==============================================================================
/**
*/
class NebuloModAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    NebuloModAudioProcessor();
    ~NebuloModAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    int getNumParameters() override;
    float getParameter (int index) override;
    void setParameter (int index, float newValue) override;

    const String getParameterName (int index) override;
    const String getParameterText (int index) override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    float gain;

private:
    // Added by Ryan Foo and Tom Longabaugh
    // Flanger flanger;
    // Phaser phaser;

    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (NebuloModAudioProcessor)
    
// Added by Ryan Foo
public:
    // global gui variables
    
    // Delay for flanger (?)
    float delayVal;
    // LFO ms increases the delay by at the maximum
    float depthVal;
    // LFO frequency
    float rateVal;
    // LFO waveform
    int lfoWaveformVal;
    // Feedback Level (?)
    float feedbackVal;
    // Dry/Wet mix
    float mixVal;
    
    Flanger flanger;
    
    // GUI update functions
    void updateFlanger(void);
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
